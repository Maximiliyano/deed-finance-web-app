// <auto-generated />
using System;
using Deed.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Deed.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(DeedDbContext))]
    partial class DeedDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Deed.Domain.Entities.Capital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Balance")
                        .HasColumnType("real");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IncludeInTotal")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Capitals", (string)null);
                });

            modelBuilder.Entity("Deed.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<float>("PlannedPeriodAmount")
                        .HasColumnType("real");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 23, 8, 48, 34, 565, DateTimeKind.Unspecified).AddTicks(7283), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            Name = "Groceries",
                            Period = 0,
                            PlannedPeriodAmount = 0f,
                            Type = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 23, 8, 48, 34, 565, DateTimeKind.Unspecified).AddTicks(7283), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            Name = "Utilities",
                            Period = 0,
                            PlannedPeriodAmount = 0f,
                            Type = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 23, 8, 48, 34, 565, DateTimeKind.Unspecified).AddTicks(7283), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            Name = "Rent",
                            Period = 0,
                            PlannedPeriodAmount = 0f,
                            Type = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 23, 8, 48, 34, 565, DateTimeKind.Unspecified).AddTicks(7283), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            Name = "Transportation",
                            Period = 0,
                            PlannedPeriodAmount = 0f,
                            Type = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 23, 8, 48, 34, 565, DateTimeKind.Unspecified).AddTicks(7283), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            Name = "Healthcare",
                            Period = 0,
                            PlannedPeriodAmount = 0f,
                            Type = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 23, 8, 48, 34, 565, DateTimeKind.Unspecified).AddTicks(7283), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            Name = "Entertainment",
                            Period = 0,
                            PlannedPeriodAmount = 0f,
                            Type = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 23, 8, 48, 34, 565, DateTimeKind.Unspecified).AddTicks(7283), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            Name = "Education",
                            Period = 0,
                            PlannedPeriodAmount = 0f,
                            Type = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 23, 8, 48, 34, 565, DateTimeKind.Unspecified).AddTicks(7283), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            Name = "Clothing",
                            Period = 0,
                            PlannedPeriodAmount = 0f,
                            Type = 1
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 23, 8, 48, 34, 565, DateTimeKind.Unspecified).AddTicks(7283), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            Name = "Subscriptions",
                            Period = 0,
                            PlannedPeriodAmount = 0f,
                            Type = 1
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 23, 8, 48, 34, 565, DateTimeKind.Unspecified).AddTicks(7283), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            Name = "Travel",
                            Period = 0,
                            PlannedPeriodAmount = 0f,
                            Type = 1
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 23, 8, 48, 34, 565, DateTimeKind.Unspecified).AddTicks(7283), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            Name = "Gifts",
                            Period = 0,
                            PlannedPeriodAmount = 0f,
                            Type = 1
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 23, 8, 48, 34, 565, DateTimeKind.Unspecified).AddTicks(7283), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            Name = "Donations",
                            Period = 0,
                            PlannedPeriodAmount = 0f,
                            Type = 1
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 23, 8, 48, 34, 565, DateTimeKind.Unspecified).AddTicks(7283), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            Name = "Salary",
                            Period = 0,
                            PlannedPeriodAmount = 0f,
                            Type = 2
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 23, 8, 48, 34, 565, DateTimeKind.Unspecified).AddTicks(7283), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            Name = "Gifts",
                            Period = 0,
                            PlannedPeriodAmount = 0f,
                            Type = 2
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 23, 8, 48, 34, 565, DateTimeKind.Unspecified).AddTicks(7283), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            Name = "Grants",
                            Period = 0,
                            PlannedPeriodAmount = 0f,
                            Type = 2
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 23, 8, 48, 34, 565, DateTimeKind.Unspecified).AddTicks(7283), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            Name = "Sales",
                            Period = 0,
                            PlannedPeriodAmount = 0f,
                            Type = 2
                        });
                });

            modelBuilder.Entity("Deed.Domain.Entities.Exchange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Buy")
                        .HasColumnType("real");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NationalCurrencyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "base_ccy");

                    b.Property<float>("Sale")
                        .HasColumnType("real");

                    b.Property<string>("TargetCurrencyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "ccy");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Exchanges", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Buy = 44.63f,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 23, 8, 48, 34, 568, DateTimeKind.Unspecified).AddTicks(4744), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            NationalCurrencyCode = "UAH",
                            Sale = 45.45455f,
                            TargetCurrencyCode = "EUR"
                        },
                        new
                        {
                            Id = 2,
                            Buy = 41.2f,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 23, 8, 48, 34, 568, DateTimeKind.Unspecified).AddTicks(4744), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            NationalCurrencyCode = "UAH",
                            Sale = 34f,
                            TargetCurrencyCode = "USD"
                        },
                        new
                        {
                            Id = 3,
                            Buy = 43f,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 23, 8, 48, 34, 568, DateTimeKind.Unspecified).AddTicks(4744), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            NationalCurrencyCode = "UAH",
                            Sale = 43f,
                            TargetCurrencyCode = "PLN"
                        },
                        new
                        {
                            Id = 4,
                            Buy = 43f,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 23, 8, 48, 34, 568, DateTimeKind.Unspecified).AddTicks(4744), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            NationalCurrencyCode = "USD",
                            Sale = 43f,
                            TargetCurrencyCode = "UAH"
                        },
                        new
                        {
                            Id = 5,
                            Buy = 32f,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 23, 8, 48, 34, 568, DateTimeKind.Unspecified).AddTicks(4744), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            NationalCurrencyCode = "USD",
                            Sale = 32f,
                            TargetCurrencyCode = "EUR"
                        },
                        new
                        {
                            Id = 6,
                            Buy = 41f,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 23, 8, 48, 34, 568, DateTimeKind.Unspecified).AddTicks(4744), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            NationalCurrencyCode = "USD",
                            Sale = 43f,
                            TargetCurrencyCode = "PLN"
                        },
                        new
                        {
                            Id = 7,
                            Buy = 41f,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 23, 8, 48, 34, 568, DateTimeKind.Unspecified).AddTicks(4744), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            NationalCurrencyCode = "EUR",
                            Sale = 40f,
                            TargetCurrencyCode = "USD"
                        },
                        new
                        {
                            Id = 8,
                            Buy = 39f,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 23, 8, 48, 34, 568, DateTimeKind.Unspecified).AddTicks(4744), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            NationalCurrencyCode = "EUR",
                            Sale = 38f,
                            TargetCurrencyCode = "UAH"
                        },
                        new
                        {
                            Id = 9,
                            Buy = 30f,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 23, 8, 48, 34, 568, DateTimeKind.Unspecified).AddTicks(4744), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            NationalCurrencyCode = "EUR",
                            Sale = 32f,
                            TargetCurrencyCode = "PLN"
                        },
                        new
                        {
                            Id = 10,
                            Buy = 20f,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 23, 8, 48, 34, 568, DateTimeKind.Unspecified).AddTicks(4744), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            NationalCurrencyCode = "PLN",
                            Sale = 10f,
                            TargetCurrencyCode = "UAH"
                        },
                        new
                        {
                            Id = 11,
                            Buy = 7f,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 23, 8, 48, 34, 568, DateTimeKind.Unspecified).AddTicks(4744), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            NationalCurrencyCode = "PLN",
                            Sale = 6f,
                            TargetCurrencyCode = "USD"
                        },
                        new
                        {
                            Id = 12,
                            Buy = 3f,
                            CreatedAt = new DateTimeOffset(new DateTime(2025, 8, 23, 8, 48, 34, 568, DateTimeKind.Unspecified).AddTicks(4744), new TimeSpan(0, 0, 0, 0, 0)),
                            CreatedBy = 0,
                            NationalCurrencyCode = "PLN",
                            Sale = 20f,
                            TargetCurrencyCode = "EUR"
                        });
                });

            modelBuilder.Entity("Deed.Domain.Entities.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<int>("CapitalId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("PaymentDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Purpose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CapitalId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Expenses", (string)null);
                });

            modelBuilder.Entity("Deed.Domain.Entities.Income", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<int>("CapitalId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("PaymentDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Purpose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CapitalId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Incomes", (string)null);
                });

            modelBuilder.Entity("Deed.Domain.Entities.Transfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Amount")
                        .HasColumnType("real");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("DestinationCapitalId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("SourceCapitalId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DestinationCapitalId");

                    b.HasIndex("SourceCapitalId");

                    b.ToTable("Transfers", (string)null);
                });

            modelBuilder.Entity("Deed.Domain.Entities.Expense", b =>
                {
                    b.HasOne("Deed.Domain.Entities.Capital", "Capital")
                        .WithMany("Expenses")
                        .HasForeignKey("CapitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Deed.Domain.Entities.Category", "Category")
                        .WithMany("Expenses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Capital");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Deed.Domain.Entities.Income", b =>
                {
                    b.HasOne("Deed.Domain.Entities.Capital", "Capital")
                        .WithMany("Incomes")
                        .HasForeignKey("CapitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Deed.Domain.Entities.Category", "Category")
                        .WithMany("Incomes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Capital");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Deed.Domain.Entities.Transfer", b =>
                {
                    b.HasOne("Deed.Domain.Entities.Capital", "DestinationCapital")
                        .WithMany("TransfersIn")
                        .HasForeignKey("DestinationCapitalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Deed.Domain.Entities.Capital", "SourceCapital")
                        .WithMany("TransfersOut")
                        .HasForeignKey("SourceCapitalId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DestinationCapital");

                    b.Navigation("SourceCapital");
                });

            modelBuilder.Entity("Deed.Domain.Entities.Capital", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("Incomes");

                    b.Navigation("TransfersIn");

                    b.Navigation("TransfersOut");
                });

            modelBuilder.Entity("Deed.Domain.Entities.Category", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("Incomes");
                });
#pragma warning restore 612, 618
        }
    }
}
